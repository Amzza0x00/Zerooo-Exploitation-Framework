import datetime
import logging
import os
import sys
from logging.handlers import RotatingFileHandler

INFO, WARNING, ERROR, SUCCESS, HTTPDEBUG = range(11, 16)

logging.addLevelName(INFO, '*')
logging.addLevelName(WARNING, '!')
logging.addLevelName(ERROR, '-')
logging.addLevelName(SUCCESS, '+')
logging.addLevelName(HTTPDEBUG, 'DBG')

logger = logging.getLogger('logger')

try:
    from thirdparty.ansistrm.ansistrm import ColorizingStreamHandler

    handle = ColorizingStreamHandler(sys.stdout)
    handle.level_map[logging.getLevelName('*')] = (None, 'cyan', False)
    handle.level_map[logging.getLevelName('+')] = (None, 'green', False)
    handle.level_map[logging.getLevelName('-')] = (None, 'red', False)
    handle.level_map[logging.getLevelName('!')] = (None, 'yellow', False)
    handle.level_map[logging.getLevelName('DBG')] = (None, 'white', False)
except:
    handle = logging.StreamHandler(sys.stdout)

formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s', '%Y/%m/%d %H:%M:%S')
handle.setFormatter(formatter)
logger.addHandler(handle)

dayTime = datetime.datetime.now().strftime('%Y-%m-%d')
if not os.path.exists('./logs'):
    os.makedirs('./logs')

savelog = RotatingFileHandler(f'./logs/{dayTime}.log', maxBytes=100 * 1024 * 1024, backupCount=10)
savelog.setFormatter(formatter)
logger.addHandler(savelog)
logger.setLevel(logging.DEBUG)

http_logger = logging.getLogger('http_logger')
http_savelog = RotatingFileHandler(f'./logs/http-{dayTime}.log', maxBytes=100 * 1024 * 1024, backupCount=10)
http_savelog.setFormatter(formatter)
http_logger.addHandler(http_savelog)
http_logger.setLevel(15)


class LOGGER:

    @staticmethod
    def info(msg):
        return logger.log(INFO, msg)

    @staticmethod
    def warning(msg):
        return logger.log(WARNING, msg)

    @staticmethod
    def error(msg):
        return logger.log(ERROR, msg)

    @staticmethod
    def success(msg):
        return logger.log(SUCCESS, msg)

    @staticmethod
    def debug(msg, BOOL, flag):
        if BOOL:
            if flag == 'http':
                return http_logger.log(HTTPDEBUG, msg)

    @staticmethod
    def exception(msg):
        return logger.exception(msg)


def formatHeaders(d):
    return '\n'.join(f'{k}: {v}' for k, v in d.items())
