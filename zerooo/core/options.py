from prettytable import PrettyTable, PLAIN_COLUMNS

from zerooo.core.log import LOGGER
from zerooo.utils.util import get_url


class Option(object):

    def __init__(self):
        self.info = {}
        self.option = {}

    def register_option(self, key, value):
        if key in self.option.keys():
            if value:
                self.option[key]['Current Setting'] = value
                print(f'{key} => {value}')
            else:
                msg = f'请输入 (Please input) : {key}'
                LOGGER.warning(msg)

    def get_options(self, key):
        try:
            if key == 'urls':
                return get_url(self.option[key]['Current Setting'])
            else:
                return self.option[key]['Current Setting']
        except KeyError:
            msg = f'未找到设置 (Not find set) :{key}'
            LOGGER.warning(msg)

    def show_options(self, current_module):
        tb = PrettyTable()
        tb.set_style(PLAIN_COLUMNS)
        print(f'\n模块设置 (Module options) ({current_module}):\n')
        tb.field_names = ['模块 (Name)', '当前设置 (Current Setting)', '必须 (Required)', '描述 (Description)']
        tb.add_row(['-----------', '------------------------', '---------------', '------------------'])
        for key in sorted(self.option.keys()):
            tb.add_row([key, self.get_options(key), self.option[key]['Required'], self.option[key]['Description']])

        tb.align = 'l'
        print(tb)
        print('\n')

    def show_info(self):
        print('\n')
        for key, value in self.info.items():
            print(f'{key}:{value}\n')


class Payload(object):

    def __init__(self):
        self.info = {}
        self.lhost = ''
        self.lport = ''


class OptArgs:
    def __init__(self):
        self.urls = None
        self.targets = None

    def __set__(self, instance, value):
        if instance == 'urls':
            self.urls = value
        elif instance == 'targets':
            self.target = value


OptArgset = OptArgs()


class OptProxy:

    def __init__(self):
        self.value = None

    def __set__(self, value):
        if 'http://' in value:
            self.value = value
            LOGGER.info(f'proxy => {self.value}')
        elif 'socks5://' in value:
            self.value = value
            LOGGER.info(f'proxy => {self.value}')
        else:
            LOGGER.warning('Support only http:// or socks5://')
            self.value = None

    def __get__(self):
        return self.value


optProxy = OptProxy()


class OptDebug:

    def __init__(self):
        self.value = False

    # def __set__(self, value):
    def __set__(self, value):
        if value == 'on':
            self.value = True
            LOGGER.info('debug => on')
            return self.value
        elif value == 'off':
            self.value = False
            LOGGER.info('debug => off')
            return self.value
        else:
            LOGGER.info('setg debug on/off')
            return self.value

    def __get__(self):
        return self.value


optDebug = OptDebug()
