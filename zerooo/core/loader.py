import importlib
import importlib.util
import os
from imp import load_source

from zerooo.core.exception import ModuleNotDefineException
from zerooo.core.log import LOGGER


def load_module(name):
    exp = name.replace('/', '.')

    try:
        global mod
        mod = importlib.import_module('modules.' + exp)
        if hasattr(mod, 'Zerooosploit'):
            module_self = getattr(mod, 'Zerooosploit')
            return module_self()
        else:
            # msg = f'Module {exp} doesn\'t define any object named Zerooosploit'
            msg = f'模块中未找到Zerooosploit对象 (Module doesn\'t define any object named Zerooosploit): {exp}'
            LOGGER.error(ModuleNotDefineException(msg))
    except ModuleNotFoundError:
        msg = f'未找到模块 (Module not found) : {name}'
        LOGGER.error(msg)
        return None
    except Exception:
        LOGGER.exception(name)


def del_module(module_self):
    del module_self


def reload_module():
    return importlib.reload(mod)


plugin_dict = {}


def return_plugin_collect():
    pwd = os.getcwd() + '/zerooo/plugins/'
    plugin_collect = {}
    for root, dirs, files in os.walk(pwd):
        for file in files:
            if file.endswith('.py'):
                # 排除__init__
                if file.find('__init__'):
                    plugin_name = file[:-3]
                    plugin_file_path = os.path.join(root, file)
                    plugin_collect[plugin_name] = plugin_file_path

    return plugin_collect


plugin_collect = return_plugin_collect()


def load_plugins():
    for plugin_name, plugin_path in plugin_collect.items():
        plugin = load_source(plugin_name, plugin_path)
        # 判断插件中是否存在Plugin类
        if 'Plugin' in dir(plugin):
            LOGGER.info(f'加载插件 (Load plugin) : {plugin_name} 成功 (success)')
            # 初始化类的实例并存入dict中，
            clazz = getattr(plugin, 'Plugin')
            clazz_instance = clazz()
            plugin_dict.update({plugin_name: clazz_instance})
        else:
            LOGGER.warning(
                f'请检查插件编写是否正确 {plugin_path} (Please check if the plugin is written correctly {plugin_path} )!')

    return plugin_dict
