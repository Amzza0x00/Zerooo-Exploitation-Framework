import importlib
import importlib.util
import os
from imp import load_source

from zerooo.core.exception import ModuleNotDefineException
from zerooo.core.log import LOGGER


def load_module(name):
    exp = name.replace('/', '.')

    try:
        global mod
        mod = importlib.import_module('modules.' + exp)
        if hasattr(mod, 'Zerooosploit'):
            module_self = getattr(mod, 'Zerooosploit')
            return module_self()
        else:
            msg = f'Module {exp} doesn\'t define any object named Zerooosploit'
            LOGGER.error(ModuleNotDefineException(msg))
    except ModuleNotFoundError as e:
        LOGGER.error(e)
    except Exception as e:
        LOGGER.exception(e)


def del_module(module_self):
    del module_self


def reload_module():
    return importlib.reload(mod)


plugin_dict = {}


def load_plugins():
    # 遍历插件目录加载所有py结尾的模块
    pwd = os.getcwd() + '/zerooo/plugins/'
    for root, dirs, files in os.walk(pwd):
        for file in files:
            if file.endswith('.py'):
                module_name = file[:-3]
                module_file_path = os.path.join(root, file)
                module = load_source(module_name, module_file_path)
                # 判断插件中是否存在Plugin类
                if 'Plugin' in dir(module):
                    LOGGER.info(f'Load module: {module_name} success')
                    # 初始化类的实例并存入dict中，
                    clazz = getattr(module, 'Plugin')
                    clazz_instance = clazz()
                    plugin_dict.update({module_name: clazz_instance})

    return plugin_dict


load_plugins()
