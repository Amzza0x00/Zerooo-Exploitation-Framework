import base64
import json

from zerooo.core.asyncpool import async_run
from zerooo.core.log import LOGGER
from zerooo.core.options import Option, OptArgset
from zerooo.request.httpclient import HttpClient
from zerooo.utils.config import config


class Plugin(Option):

    def __init__(self):
        super().__init__()
        self.api_url = 'https://hunter.qianxin.com/openApi/search'
        self.api_key = config.read_config('hunter', 'api-key')

    async def api_query(self, items):
        item = items.split('^')
        search = item[0]
        page = item[1]
        b64search = (base64.urlsafe_b64encode(search.encode('utf-8'))).decode('utf-8')
        url_query = f'{self.api_url}?api-key={self.api_key}&search={b64search}&page={page}&page_size=10&is_web=1'
        resp = await HttpClient().send_request_cgi('GET', url=url_query)
        return resp

    def api_result_callback(self, future):
        resp = future.result()
        if resp['code'] == 200:
            res_json = json.loads(resp['text'])
            if res_json['code'] == 401:
                LOGGER.warning(res_json['message'])
            elif res_json['code'] == 200:
                # 提取url
                url = res_json['data']['arr']
                urls = []
                for i in range(len(url)):
                    dat_dict = url[i]
                    urls.append(dat_dict['url'])

                # 添加全局参数中
                OptArgset.__set__('url', urls)
                # 消耗积分、剩余积分
                consume_quota = res_json['data']['consume_quota']
                rest_quota = res_json['data']['rest_quota']
                msg = f'消耗积分 (Consume points): {consume_quota}'
                msg1 = f'今日剩余积分 (Remaining points today) : {rest_quota}'
                LOGGER.info(msg)
                LOGGER.info(msg1)
            else:
                LOGGER.warning(res_json['message'])

    def run(self):
        while True:
            search = input("请输入查询语法 (Please enter query syntax) : ")
            page = input("请输入查询页数 (Please enter the number of inquiry pages) :")
            if search and page != '':
                break

        strs = f"{search}^{page}"
        items = [strs]
        async_run(self.api_query, items, self.api_result_callback, limit=50)
