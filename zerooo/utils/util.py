import os
import re
from urllib.parse import urlparse

from prettytable import PrettyTable, PLAIN_COLUMNS

from zerooo.core.common import IS_WIN


def get_url(urls):
    # 处理urls并返回列表
    if urls:
        url_list = []
        if type(urls) != list:
            urls = urls.split(',')
            for i in urls:
                url_list.append(parse_url_path(i))
            return url_list
        else:
            for i in urls:
                url_list.append(parse_url_path(i))
            return url_list
    else:
        return None


def parse_url_path(url):
    # 处理urls path
    o = urlparse(url)
    if o.path == '':
        return url + '/'
    else:
        return url


# 处理url协议
def parse_url(url) -> list:
    l = []
    l2 = []
    o = urlparse(url)
    if o.scheme.find('http') or o.scheme.find('https'):
        url_http = 'http://' + url
        url_ssl = 'https://' + url
        if not o.path:
            url_http += '/'
            url_ssl += '/'

        l.append(url_http)
        l.append(url_ssl)
        l2 = list(set(l))
    else:
        l.append(url)
        l2 = list(set(l))

    return l2


def get_ports(ports):
    # 处理端口格式
    if ',' in ports:
        port_list = ports.split(',')
        return port_list
    elif '-' in ports:
        port_list = ports.split('-')
        index = int(port_list[0])
        if index == 1:
            end = int(port_list[1]) + 1
            return list(range(index, end))
        else:
            end = int(port_list[1])
            return list(range(index, end))
    else:
        l = [ports]
        return l


def header_format(headers):
    regx = re.findall('<CIMultiDictProxy\((.*?)\)>', str(headers))
    regs = re.findall("'(.*?)': '(.*?)'", regx[0])
    result = []
    for i in regs:
        result.append(f'{i[0]}: {i[1]}')

    return '\n'.join(result)


def header_format_dict(headers):
    regx = re.findall('<CIMultiDictProxy\((.*?)\)>', str(headers))
    regs = re.findall("'(.*?)': '(.*?)'", regx[0])
    result = {}
    for i in regs:
        result[i[0]] = i[1]

    return result


def parse_dict(wordlist):
    if IS_WIN:
        pwd = os.getcwd() + '\\resources\\' + wordlist.replace('/', '\\')
        return pwd
    else:
        pwd = os.getcwd() + '/resources/' + wordlist
        return pwd


def search_style(result):
    tb = PrettyTable()
    tb.set_style(PLAIN_COLUMNS)
    tb.field_names = ['名称 (Name)', '模块 (Module)']
    tb.add_row(['----', '------'])
    if result:
        for i in result:
            if type(i) == tuple:
                tb.add_row([i[0], i[1]])
            elif type(i) == list:
                tb.add_row([i[0][0], i[0][1]])

        tb.align = 'l'
        print(tb)
    else:
        return None


def list_style(items):
    print('\n')
    tb = PrettyTable()
    tb.set_style(PLAIN_COLUMNS)
    tb.field_names = ['名称 (Name)', '模块 (Module)', '描述 (Description)']
    tb.add_row(['----', '------', '-----------'])
    for i in items:
        _ = list(i)
        # print(_)
        tb.add_row(_)

    tb.align = 'l'
    print(tb)
    print('\n')


def return_shell_file(shell_name):
    # 返回shell文件内容
    if IS_WIN:
        pwd = os.getcwd() + '\\resources\\shell\\' + shell_name
        if os.path.exists(pwd):
            with open(pwd, 'r') as f:
                return f.read(), True
        else:
            return None, True
    else:
        pwd = os.getcwd() + '/resources/shell/' + shell_name
        if os.path.exists(pwd):
            with open(pwd, 'r') as f:
                return f.read(), True
        else:
            return None, True
