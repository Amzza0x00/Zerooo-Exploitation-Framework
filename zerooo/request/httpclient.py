import asyncio
import socket
import ssl

import aiohttp
from aiohttp import ClientConnectorSSLError
from urllib3 import disable_warnings

from zerooo.core.log import LOGGER
from zerooo.core.options import optProxy, optDebug
# from zerooo.request.hookrequest import build_log_trace_config
from zerooo.utils.data import random_ua


class HttpClient(object):

    def __init__(self):
        self.http_headers = {'User-Agent': random_ua()}
        self.http_timeout = 60
        self.verify_ssl = False
        self.http_allow_redirects = False
        self.proxy = optProxy.__get__()
        self.debug = optDebug.__get__()
        if not self.verify_ssl:
            disable_warnings()

    # async def send_request_cgi(self, method, url, rate=50, **kwargs):
    async def send_request_cgi(self, method, url, **kwargs):
        kwargs.setdefault('timeout', self.http_timeout)
        kwargs.setdefault('headers', self.http_headers)
        kwargs.setdefault('verify_ssl', self.verify_ssl)
        kwargs.setdefault('allow_redirects', self.http_allow_redirects)
        kwargs.setdefault('proxy', self.proxy)

        # 连接数限制 禁止dns缓存
        conn = aiohttp.TCPConnector(use_dns_cache=False)

        try:
            from zerooo.request.hookrequest import build_log_trace_config
            trace_config = build_log_trace_config()
            # async with asyncio.Semaphore(rate):
            async with aiohttp.ClientSession(connector=conn, trace_configs=[trace_config]) as session:
                resp = await session.request(method, url, **kwargs)
                text = await resp.text()
                content = await resp.read()
                stream_content = await resp.content.read()
                resp = {
                    'code': resp.status,
                    'text': text,
                    'content': content,
                    'url': resp.url,
                    'stream_content': stream_content,
                    'headers': resp.headers,
                    'cookie': resp.cookies
                }
                return resp
        except aiohttp.ClientConnectorError:
            LOGGER.warning(f'{url} Error: ConnectionError')
        except aiohttp.ServerDisconnectedError:
            LOGGER.warning(f'{url} Error: ServerDisconnectedError')
        except aiohttp.InvalidURL:
            LOGGER.warning(f'Invalid URL format: {url}')
        except ConnectionAbortedError as e:
            LOGGER.warning(f'{url} Error: ConnectionAbortedError')
        except ConnectionRefusedError as e:
            LOGGER.warning(f'{url} Error: ConnectionRefusedError')
        except ConnectionError as e:
            LOGGER.warning(f'{url} Error: ConnectionError')
        except ssl.SSLError:
            LOGGER.warning(f'{url} Error: SSLError')
        except socket.error as e:
            LOGGER.warning(e)
        except KeyboardInterrupt:
            LOGGER.warning('模块停止运行 (Module has been stopped)')
        except asyncio.TimeoutError as e:
            LOGGER.warning(f'{url} Error: TimeoutError')
        except aiohttp.ClientConnectionError:
            LOGGER.warning(f'{url} Error: ConnectionError')
        except ClientConnectorSSLError:
            LOGGER.warning(f'{url} Error: SSLError')
        except Exception as e:
            LOGGER.exception(e)

        return None
