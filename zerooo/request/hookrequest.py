import textwrap
from asyncio import CancelledError
from types import SimpleNamespace

from aiohttp import (
    ClientSession,
    TraceRequestStartParams,
    TraceRequestChunkSentParams,
    TraceRequestEndParams,
    TraceConfig,
    TraceRequestExceptionParams,
)

from zerooo.core.log import LOGGER, formatHeaders
from zerooo.core.options import optDebug

# fixme
debug = optDebug.__get__()


def is_printable_content_type(content_type):
    return 'text' in content_type or 'json' in content_type or 'xml' in content_type or 'html' in content_type


# hook 请求包
async def on_request_start(session: ClientSession, trace_config_ctx: SimpleNamespace,
                           params: TraceRequestStartParams) -> None:
    trace_config_ctx.method = params.method
    trace_config_ctx.url = params.url
    trace_config_ctx.headers = formatHeaders(params.headers)
    trace_config_ctx.chunk = None


# hook post数据
async def on_request_chunk_sent(session: ClientSession, trace_config_ctx: SimpleNamespace,
                                params: TraceRequestChunkSentParams) -> None:
    trace_config_ctx.chunk = params.chunk


async def on_request_end(session: ClientSession, trace_config_ctx: SimpleNamespace,
                         params: TraceRequestEndParams) -> None:
    if is_printable_content_type(params.response.content_type):
        params.response._text = await params.response.text()
    else:
        params.response._text = params.response.content

    reshdrs = formatHeaders(params.response.headers)
    result = textwrap.dedent(f'''
---------------- request ----------------
{params.method} {params.url}
Host: {params.url.host}:{params.url.port}
{trace_config_ctx.headers}

{str(trace_config_ctx.chunk, 'utf-8') if trace_config_ctx.chunk else ''}
---------------- response ----------------
{params.response.status} {params.response.reason}
Host: {params.url.host}:{params.url.port}
{reshdrs}

{params.response._text}
''')
    print(debug)
    LOGGER.debug(result, debug, 'http')


async def on_request_exception(session: ClientSession, trace_config_ctx: SimpleNamespace,
                               params: TraceRequestExceptionParams) -> None:
    if isinstance(params.exception, CancelledError):
        result = textwrap.dedent(f'''
---------------- request ----------------
{params.method} {params.url}
Host: {params.url.host}:{params.url.port}
{trace_config_ctx.headers}

{str(trace_config_ctx.chunk, 'utf-8') if trace_config_ctx.chunk else ''}
''')
        LOGGER.debug(result, debug, 'http')
        LOGGER.warning("Request cancelled")
    else:
        result = textwrap.dedent(f'''
---------------- request ----------------
{params.method} {params.url}
Host: {params.url.host}:{params.url.port}
{trace_config_ctx.headers}

{str(type(params.exception))}{str(params.exception)}
''')
        LOGGER.exception(result)


def build_log_trace_config() -> TraceConfig:
    trace_config = TraceConfig()
    trace_config.on_request_start.append(on_request_start)
    trace_config.on_request_end.append(on_request_end)
    # trace_config.on_request_redirect.append(on_request_redirect)
    trace_config.on_request_chunk_sent.append(on_request_chunk_sent)
    trace_config.on_request_exception.append(on_request_exception)
    return trace_config
