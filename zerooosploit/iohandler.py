"""
Io Handler classes

提供输入输出工作
"""
import os
try:
    import readline
except ImportError:
    import pyreadline as readline

from zerooosploit import exploits

# 命令补全文件
COMPLETION_FILE = '.zeroocmd.conf'


def is_libedit():
    '''判断是否开启补全，返回True或False'''
    return 'libedit' in readline.__doc__


def get_history_items():
    '''迭代命令'''
    return [ readline.get_history_item(i)
             for i in range(1, readline.get_current_history_length() + 1)
             ]


class Iohandler:

    def __init__(self):
        self.prompt = 'zsf > '
        self.matches = []
        self.setup()
        return

    def complete(self, text, state):
        response = None
        if state == 0:
            history_values = get_history_items()
            if text:
                self.matches = sorted(h
                                      for h in history_values
                                      if h and h.startswith(text))
            else:
                self.matches = []
        try:
            response = self.matches[state]
        except IndexError:
            pass
        return response

    def setup(self):
        if os.path.exists(COMPLETION_FILE):
            readline.read_history_file(COMPLETION_FILE)

        readline.set_completer(self.complete)
        if is_libedit():
            readline.parse_and_bind("bind ^I rl_complete")
        else:
            readline.parse_and_bind("tab: complete")

    def parse_line(self, line):
        """
        分割用户输入
        :param line: input
        :return: (command, arg)
        """
        cmd, _, arg = line.strip().partition(' ')  # 例如：use exploits/windows/ms08-067
        return cmd, arg  # 例如： command = set, arg = exploits/windows/ms08-067

    def current_status(self, arg):
        """获取当前状态"""
        return 'zsf ({}) >'.format(arg)

    def show_modules(self):
        """查看模块信息（作者、描述、ip、端口、系统.......）"""
        pass

    def show_modules_all(self):
        """列出所有模块"""
        pass

    def start(self):
        """用户输入输出循环"""
        while True:
            cmd, args = self.parse_line(input(self.prompt).lower())
            if not cmd:
                continue

            input_status = self.current_status(args)
            a = exploits.ExploitAggregate(modules=args.replace('/', '.'))
            a.select_modules()
            while True:
                arg1 = input(input_status).lower()
                if arg1 == 'run' or 'exploit':
                    a.exploit()  # bug
                if arg1 == 'exit':
                    a.del_modules()
                    break
