import asyncio
import random

from zerooo.core.asyncpool import async_run
from zerooo.core.log import LOGGER
from zerooo.core.options import Option
from zerooo.utils.util import get_ports


class Zerooosploit(Option):

    def __init__(self):
        super(self.__class__, self).__init__()
        self.info = {
            'Name': '端口扫描',
            'Module': 'auxiliary/scanner/portscan',
            'Product': 'scanner',
            'Cve': '',
            'Create_date': '20210411',
            'Description': '异步方式扫描tcp端口',
            'Authors': '',
            'References': ''
        }

        self.option = {
            'ip': {'Current Setting': '1.15.178.39', 'Required': 'yes', 'Description': 'ipv4地址'},
            'ports': {'Current Setting': '22', 'Required': 'yes', 'Description': '端口或端口范围(1-65535),(22,80,445)'},
            'rate': {'Current Setting': '200', 'Required': 'no', 'Description': '扫描速率'},
            'status': {'Current Setting': 'open', 'Required': 'yes', 'Description': '提取状态'}
        }

    async def tcp_port_scan(self, port):
        ip = self.get_options('ip')
        try:
            reader, writer = await asyncio.open_connection(host=ip, port=port)
            result = (ip, port, 'open')
            # 释放套接字
            writer.close()
            return result
        except (ConnectionRefusedError, asyncio.TimeoutError, TimeoutError):
            result = (ip, port, 'close')
            return result

    def tcp_scan_callback(self, future):
        ip, port, status = future.result()
        if status == 'open':
            msg = f'{ip} {port} {status}'
            LOGGER.success(msg)

    def exploit(self):
        # use auxiliary/scanner/portscan
        ports = get_ports(self.get_options('ports'))
        random.shuffle(ports)
        async_run(self.tcp_port_scan, ports, self.tcp_scan_callback)
